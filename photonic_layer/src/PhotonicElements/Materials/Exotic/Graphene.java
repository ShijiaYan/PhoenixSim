package PhotonicElements.Materials.Exotic;

import PhotonicElements.Utilities.MathLibraries.Complex;
import PhotonicElements.Utilities.PhysicalConstants;
import PhotonicElements.Utilities.Wavelength;
import ch.epfl.general_libraries.clazzes.ParamName;
import flanagan.interpolation.LinearInterpolation;

/**
 * The purpose of this class is to model graphene from  
 * "Analysis of	an electro-optic modulator based on a graphene-silicon hybrid 1D photonic crystal nanobeam cavity".
 * @author MB
 *
 */

public class Graphene {


	//Start here:
	PhysicalConstants pc = new PhysicalConstants();
	
	//Inputs/constants including values from paper
	double C, n0, vf, Vin, omega, gamma_eV,  inverseTau, dgNm, Ep ;
	double q = PhysicalConstants.getElementaryCharge();
	double h = PhysicalConstants.getPlanckConstant();
	double epsilon0 = PhysicalConstants.getPermittivityVacuum();
	Wavelength inputLambda ;
	
	//***********************************************************
	public Graphene(
			@ParamName(name = "Wavelength (nm)", default_="1550") Wavelength inputLambda, 
			@ParamName(name = "Applied Voltage (V)") double Vin, 
//			@ParamName(name = "Effective Capacitance per area (F/m^2)", default_="4.5e-3") double C, 
			@ParamName(name = "Effective Capacitance per area (F/m^2)", default_="20e-3") double C, 
			@ParamName(name = "Intrinsic Carrier Concentration (1/m^3)", default_="1.17e17") double n0, 
			@ParamName(name = "Fermi Velocity (m/s)", default_="1e6") double vf, 
			@ParamName(name = "Interband transistion broadening (eV)", default_="0.11") double gamma_eV, 
			@ParamName(name = "Inverse of free carrier scattering (1/sec)", default_="0") double inverseTau,
			@ParamName(name = "Thickness of graphene (nm)", default_="0.35") double dgNm){
		this.inputLambda = inputLambda ;
		this.C = C;
		this.vf = vf;
		this.dgNm = dgNm;
		this.gamma_eV = gamma_eV;
		this.Vin = Vin ;
		this.n0 = n0;
		this.inverseTau = inverseTau ;
		this.omega = 2*Math.PI*inputLambda.getFreqHz() ;
		this.Ep = h*inputLambda.getFreqHz() ;
	}
	//***********************************************************
	public Graphene(
			@ParamName(name = "Wavelength (nm)", default_="1550") Wavelength inputLambda, 
			@ParamName(name = "Applied Voltage (V)") double Vin
			){
		this.inputLambda = inputLambda ;
//		this.C = 1.4e-3 ; // based on Chris's Mathematica file
		this.C = 20e-3 ;
		this.vf = 1e6 ;
		this.dgNm = 0.35 ;
		this.gamma_eV = 110e-3 ;
		this.Vin = Vin ;
		this.n0 = 1.17e17 ;
		this.inverseTau = 0 ;
		this.omega = 2*Math.PI*inputLambda.getFreqHz() ;
		this.Ep = h*inputLambda.getFreqHz() ;
	}
	//***********************************************************
	// interpolating the plot of real and imaginary of epsilon from the paper
	
	public double getRealEpsilonInterpolated(){
		double[] fermiEnergy_eV = {0, 0.019292032705397033076621937652817, 0.040688249194245906803502066395595, 0.061144791076326532319740181264933, 0.080215590220432855805832161877333, 0.09975384975070554494092078812173, 0.12068498277060593637521890286735, 0.14068594885260923832426271928853, 0.16115912915521443671273971176561, 0.1788370548096930856551978195057, 0.20023802513297750405030228648684, 0.22025087580106980644778502664849, 0.24073356377254626070616438937577, 0.2607487913578563354377592986566, 0.28031319697752471453711109461437, 0.29941014221102674186525405275461, 0.32038405974084738225826640700689, 0.3404254334155533689987294110324, 0.35953901706957996919911124678038, 0.37957325999263241689263281841704, 0.40095759189539220690434717653261, 0.42043405157800217697428024621331, 0.43755894782647392071694980586472, 0.4519004740129081154620394045196, 0.46115698196474003145439723994059, 0.47225480845462353141073208462331, 0.48105098677194257916767128335778, 0.49121389248949348660389091492107, 0.50047515427576094726447308858042, 0.5208389963863477856165218327078, 0.54028930997956203796661611704621, 0.56158807286248124679417514926172, 0.58053937078169148833239887608215, 0.60035449715085176247697518192581, 0.62017578589798405541699821696966, 0.64000323702308825613016551869805, 0.65982760695920661397906314959982, 0.68086083004084418934809264101204, 0.70009155756565399908453173338785, 0.71992517106873032961544822683209, 0.74036167055007329196314458386041, 0.76019836524213568740293567316257, 0.78002889755622606404728003326454, 0.79987175462626070032712277679821, 0.8203113352965896165613912671688, 0.83954822519937166713788201377611, 0.85998780586970036132754557911539, 0.8804335489180017404464706487488, 0.9002764059880360436594060047355, 0.9177046379560183098078596231062, 0.93935615296085250847113456984516, 0.95919592884190085779749779248959, 0.98024147667948258177972320481786, 0.99706990385818405897566663043108} ;
		double[] realEps = {1.0841240442137838329017540672794, 1.0841240442137838329017540672794, 1.1122033596133320543231093324721, 1.027965413414687390059043536894, 1.0560447288142356114803988020867, 1.1122033596133320543231093324721, 1.1402826750128802757444645976648, 1.1683619904124320498794986633584, 1.2806792520106249355649197241291, 1.3368378828097249311213090550154, 1.4210758290083695953853748505935, 1.5895517214056553711998276412487, 1.8141862446020446952843485632911, 2.0107414523988822452338354196399, 2.3757725525930091237114538671449, 2.7127243373875877807677170494571, 3.2462313299790075404871458886191, 3.7516590071708790787852194625884, 4.2851659997622988385046483017504, 4.7063557307555257125386560801417, 4.5940384691573328268532350193709, 3.9201348995681719600270298542455, 2.9373588605839806575659167720005, 2.0388207677984304666551906848326, 1.5053137752070107069357618456706, 0.74717225941920872855916968546808, 0.26982389762688896439613017719239, -0.54447624896002011496420891489834, -1.021824610752343431840927223675, -2.2011558575333687315378483617678, -3.1839318965175600339989614440128, -4.3071045124994942199236902524717, -5.2062368765104327650306004215963, -6.1526138029396566508921750937589, -7.0261925042589437884199554673614, -7.826972980468283935806539375335, -8.6641525692325966900853018159978, -9.4649330454419420277645258465782, -10.19291529654133832138995785499, -10.920897547640743496799586864654, -11.648879798740141566781858273316, -12.340462937284570443807751871645, -13.104844300938943035816919291392, -13.723629214373438856000575469807, -14.415212352917869509383308468387, -15.070396378907332746166503056884, -15.761979517451761623192396655213, -16.380764430886259219732892233878, -16.99954934432074438177551201079, -17.654733370310207618558706599288, -18.273518283744703438742362777703, -18.928702309734163122811878565699, -19.583886335723626359595073154196, -20.202671249158115074351371731609} ;
		LinearInterpolation linEps = new LinearInterpolation(fermiEnergy_eV, realEps) ;
		double realEpsilon = linEps.interpolate(getFermiLevel_eV()) ;
		return realEpsilon ;
	}
	
	public double getImagEpsilonInterpolated(){
		double[] fermiEnergy_eV = {0, 0.019124875757516892477161363217419, 0.030616905793388698303614248175109, 0.043379542709409885103966075803328, 0.059986635716568058318554079733076, 0.079984189434170543941959863332158, 0.10211029976891830561847029912315, 0.123812874476949552615678840084, 0.14041561609068259341981388388376, 0.16041099411157247467407671592809, 0.18126649756617088660171077663108, 0.20297342366762735621499302851589, 0.22296009890166681999268405434123, 0.24252758990241518599617620566278, 0.26252296792330509500601465333602, 0.28251399455076986466650623697205, 0.30163401726096317201353258496965, 0.32158805704431403515997089925804, 0.33856646895708664146695809904486, 0.35341849994942658996777140600898, 0.36231274811047237127681341917196, 0.37246890036481727914718931060634, 0.38092873441558372515913788447506, 0.38896720853634625392203361116117, 0.39572419729339641802923210889276, 0.40333043300059218116970782830322, 0.41094319579792559782305261251167, 0.41980263281157004229271478834562, 0.43079280213907245045135141481296, 0.445186486357294519677907373989, 0.47146527648412867028682171621767, 0.48123052856244585839817773376126, 0.49523766399806545823736314559937, 0.50969009202752724174700915682479, 0.52159042781312758840783772029681, 0.5420028143705961642950796885998, 0.52226621150886498590182327461662, 0.54132405708294839552507937696646, 0.56088133195096323557748974053538, 0.58194972250798004953509234837838, 0.60101526476638789109330218707328, 0.62057767075728575978388334988267, 0.64215575285399983940237689239439, 0.66222271926171216716028311566333, 0.67979253919976656561630079522729, 0.70037432827005896562866382737411, 0.72044642580065421100243838736787, 0.7425341994370655562818228645483, 0.76160230725691469011451317783212, 0.78067811176108825588215722746099, 0.80225362829636082118156537035247, 0.8223308569498388731489058045554, 0.84190095962506106275213824119419, 0.85997277441848840595639558159746, 0.88156111876096820978432333504315, 0.90214290783126083184129129222129, 0.92121614677399277226754747971427, 0.94028168903240061382575731840916, 0.96187259893632159890586308392812, 0.97943985331293481610970275141881, 0.9964999817112920599271319588297} ;
		double[] imagEps = {16.035195713323567190400353865698, 16.163706865813566082579200156033, 16.138004635315560619801544817165, 16.035195713323567190400353865698, 16.086600174319563905100949341431, 15.958089021829565012922103051096, 15.829577869339573226170614361763, 15.726768947347572691342065809295, 15.726768947347572691342065809295, 15.572555564359575441812921781093, 15.52115110336357872711232630536, 15.469746642367582012411730829626, 15.212724337387584228054038248956, 15.03280872390159572660195408389, 14.878595340913598477072810055688, 14.672977496929604512843070551753, 14.236039578463618227033293806016, 13.593483816013628623364795089401, 13.002332514559654441654856782407, 12.436883443603669263666233746335, 11.897136603145678890314229647629, 11.177474149201700015510141383857, 10.534918386751719765470625134185, 9.9437670852977362301317043602467, 9.3012113228477488746648305095732, 8.632953329899770267275016522035, 8.0418020284457831792224169475958, 7.0908195000198084301246126415208, 6.1655392020918355910907848738134, 5.2145566736658608419929805677384, 3.8523384572718981644356972537935, 3.5439116912959107708047667983919, 3.0555693118339206648670369759202, 2.7985470068539299859367019962519, 2.5672269323719341116429859539494, 2.3102046273919398799989721737802, 2.5223842161562473052072164136916, 2.3102293886929956556741672102362, 2.0677667287349876801272330339998, 1.8859197337664910278098862050911, 1.7646884037874886082264414000065, 1.5828414088189849857901680962868, 1.4919179113347331711025844924734, 1.3403787488609801500927254380713, 1.3403787488609801500927254380713, 1.3403787488609801500927254380713, 1.2494552513767283388745887862115, 1.2494552513767283388745887862115, 1.1585317538924765276564521343516, 1.1585317538924765276564521343516, 1.0373004239134741080730073292671, 1.0069925914187235066465930799495, 0.9160690939344716936937329521129, 0.9160690939344716936937329521129, 0.94637692642922229685487067740723, 0.94637692642922229685487067740723, 0.9160690939344716936937329521129, 0.79483776395546927584501162300512, 0.8554534289449704839020105495706, 0.82514559645021988074087282427627, 0.73422209896596806778801269643964} ;
		LinearInterpolation linEps = new LinearInterpolation(fermiEnergy_eV, imagEps) ;
		double imagEpsilon = linEps.interpolate(getFermiLevel_eV()) ;
		return imagEpsilon ;
	}
	
	public Wavelength getInputLambda(){
		return inputLambda ;
	}
	
	//***********************************************************
	public double getVin(){
		return Vin ;
	}
	
	public double getFermiLevel(){
		double Ef =  h/(2*Math.PI)*vf*Math.sqrt(Math.PI*(n0*0+C*Math.abs(Vin)/q));
		return Ef ;
	}
	
	public double getFermiLevel_eV(){
		double Ef =  h/(2*Math.PI)*vf*Math.sqrt(Math.PI*(n0*0+C*Math.abs(Vin)/q));
		return (Ef/q) ;
	}
	
	public double getFermiLevel_meV(){
		double Ef =  h/(2*Math.PI)*vf*Math.sqrt(Math.PI*(n0*0+C*Math.abs(Vin)/q));
		return (Ef/q * 1e3) ;
	}
	
/*	// Calculating alpha
	
	public double getAlpha(double Ef_eV){
		double T = 300 ; // kelvin
		double kB = pc.getBoltzmannConstant() ;
		double Ef = Ef_eV * q ;
		double arg1 = Math.tanh((Ep+2*Ef)/(4*kB*T)) ;
		double arg2 = Math.tanh((Ep-2*Ef)/(4*kB*T)) ;
		double alpha0 = 0.1 ;
		double alpha = alpha0/2 * (arg1 + arg2) ;
		return alpha ;
	}*/
	
	
	// Calculating real and imaginary of Epsilon as a function of fermi level
	
	public double getRealEpsilon(double Ef_eV){
		double c1 = q*q/(Math.PI*epsilon0*dgNm*1e-9) ;
		double c2 = c1/(8*Ep) ;
//		double Ef = getFermiLevel() ;
		double Ef = Ef_eV * q ;
		// note that Energy is in J but gamma is in eV 
		double arg1 = (Math.pow(Ep+2*Math.abs(Ef), 2) + Math.pow(gamma_eV*q, 2))/(Math.pow(Ep-2*Math.abs(Ef), 2) + Math.pow(gamma_eV*q, 2)) ;
		double c3 = Math.log(arg1) ;
		double arg2 = Math.abs(Ef)/(Math.pow(Ep, 2) + Math.pow(inverseTau, 2)) ;
		double realEpsilon = 1 + c2*c3 - c1*arg2 ;
		return realEpsilon ;
	}

	public double getImagEpsilon(double Ef_eV){
		double c1 = q*q/(4*Ep*epsilon0*dgNm*1e-9) ;
//		double Ef = getFermiLevel() ;
		double Ef = Ef_eV * q ;
		double arg1 = (Ep-2*Math.abs(Ef))/(gamma_eV*q) ;
		double a1 = Math.atan(arg1) ;
		double arg2 = (Ep+2*Math.abs(Ef))/(gamma_eV*q) ;
		double a2 = Math.atan(arg2) ;
		double imagEpsilon = c1*(1+(a1-a2)/Math.PI) ;
		return imagEpsilon ;
	}
	
	public Complex getComplexExpsilon(double Ef_eV){
		return new Complex(getRealEpsilon(Ef_eV), getImagEpsilon(Ef_eV)) ;
	}
	
	public double getIndex(double Ef_eV){
		double n = getComplexExpsilon(Ef_eV).sqrt().re() ;
		return n ;
	}
	
	public double getImagIndex(double Ef_eV){
		double imagIndex = getComplexExpsilon(Ef_eV).sqrt().im() ;
		return imagIndex ;
	}
	
}