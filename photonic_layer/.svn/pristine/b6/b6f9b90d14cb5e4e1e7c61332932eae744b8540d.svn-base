package NASA.Modulator;

import NASA.Graphene.Graphene;
import PhotonicElements.RingDesignSpace.AllPass.RingWgDesignSpaceKappa;
import PhotonicElements.Utilities.Wavelength;
import PhotonicElements.Waveguides.CurvedWaveguide.BendLossMode.ConstantBendLossModel;
import PhotonicElements.Waveguides.WaveguideProperties.WgProperties;
import ch.epfl.general_libraries.clazzes.ParamName;
import flanagan.interpolation.LinearInterpolation;

public class GrapheneRingModulator {

	// step 1: create the ring
	// step 2: find the effective index of the mode by a linear combination of graphene and the original mode
	// step 3: find the resonance behavior as a function of applied voltage to graphene and the original mode
	
	Wavelength inputLambda ;
	double radiusMicron, resLambdaNm, lambdaNm ;
	double realNeff, imagNeff , alphaPerCm, kappa, Vintrinsic = 0.94 ;
	Graphene graphene ;
	RingWgDesignSpaceKappa ringMod ;
	double grapheneVoltage ;

	
	public GrapheneRingModulator(
			@ParamName(name="Wavelength (nm)") Wavelength inputLambda,
			@ParamName(name="Ring Radius (micron)") double radiusMicron,
			@ParamName(name="Resonance Wavelength (nm)") double resLambdaNm,
			@ParamName(name="Kappa") double kappa,
			@ParamName(name="Graphene Voltage") double grapheneVoltage
			) {
		this.inputLambda = inputLambda ;
		this.grapheneVoltage = grapheneVoltage ;
		lambdaNm = inputLambda.getWavelengthNm() ;
		this.radiusMicron = radiusMicron ;
		this.kappa = kappa ;
		this.graphene = new Graphene(inputLambda, grapheneVoltage-Vintrinsic) ;
		this.resLambdaNm = resLambdaNm ;
		Wavelength resInputLambda = new Wavelength(resLambdaNm) ;
		this.alphaPerCm = resInputLambda.getK0() * getImagNeff(graphene.getFermiLevel_eV()) /100 ;
		double alphadBperCm = alphaPerCm * 100/23 ;
		WgProperties wgProp = new WgProperties(1, 1, 1.1, new ConstantBendLossModel(alphadBperCm)) ;
		this.ringMod = new RingWgDesignSpaceKappa(resInputLambda, wgProp, radiusMicron, kappa) ;
	}
	
	public double getRealNeff(double Ef_eV){
		double[] fermiEnergy_eV = {0, 0.01144951846, 0.02433376053, 0.02948604384, 0.0372180026, 0.04237264178, 0.05525923971, 0.06299119848, 0.07330047683, 0.08232109538, 0.09391903353, 0.1003623325, 0.11582625, 0.127426544, 0.1377381783, 0.1480474566, 0.1622274261, 0.1725390603, 0.1828554062, 0.1957443601, 0.2047673345, 0.2202383196, 0.2318480371, 0.2395870635, 0.247323734, 0.2554876019, 0.2649487677, 0.2752674695, 0.2838695289, 0.2924668765, 0.3002082587, 0.3096662834, 0.3208456624, 0.3285901858, 0.3363347092, 0.344077662, 0.3526828625, 0.3638591002, 0.3698822694, 0.379337153, 0.3896464313, 0.3973752489, 0.4042371071, 0.4093823228, 0.4136652908, 0.4196664719, 0.4248038347, 0.4282308374, 0.4325138054, 0.436798344, 0.4419372774, 0.4462202454, 0.4505032134, 0.4530695389, 0.4573540775, 0.4599204031, 0.462485158, 0.4676272326, 0.4719102006, 0.4761931686, 0.4813383843, 0.4856197818, 0.4881861073, 0.4924690753, 0.4958945074, 0.4993167983, 0.5027406598, 0.5078827343, 0.5130248089, 0.5173093475, 0.522451422, 0.5250177475, 0.5293022861, 0.5327261476, 0.5378682222, 0.5421511902, 0.5490130484, 0.5550110883, 0.5610154105, 0.5652936668, 0.5712995596, 0.5747234211, 0.580721461, 0.5871529806, 0.5935845003, 0.5974363444, 0.6025768484, 0.6077197082, 0.6128602122, 0.6180030721, 0.6244298799, 0.6308661113, 0.6372929192, 0.642435779, 0.647576283, 0.6540078026, 0.6604369664, 0.6668661302, 0.6745863096, 0.6797244577, 0.6887285852, 0.6951624607, 0.7001597802, 0.707024256, 0.7110239963, 0.7161671179, 0.7218861184, 0.72702924, 0.7327471934, 0.737890315, 0.7436061743, 0.7504716971, 0.7567644823, 0.7607652697, 0.7682003891, 0.7739172954, 0.7813482266, 0.7870630388, 0.7939254205, 0.799644421, 0.805934065, 0.8122247561, 0.8173710188, 0.8230879252, 0.8293775692, 0.8350944755, 0.8408124289, 0.8471041671, 0.8545382394, 0.8631167401, 0.8694021959, 0.8739725798, 0.8836986499, 0.8911327223, 0.8974223663, 0.9025696761, 0.9077138448, 0.9145751794, 0.9214375611, 0.9300171088, 0.9351633716, 0.9420268004, 0.9477447537, 0.9551809202, 0.9620401607, 0.9740498523, 0.9803426374, 0.9860605908, 1} ;
		double[] realNeff = {2.457452468, 2.457449269, 2.457446069, 2.45744287, 2.45744287, 2.45744287, 2.45744287, 2.45744287, 2.45744287, 2.45744287, 2.45744287, 2.45744287, 2.45744287, 2.457446069, 2.457449269, 2.457449269, 2.457455667, 2.457458867, 2.457468464, 2.457471664, 2.457474863, 2.457484461, 2.457500457, 2.457510055, 2.457516453, 2.457519653, 2.457534583, 2.45754738, 2.45756231, 2.457570841, 2.457583638, 2.457594302, 2.457609232, 2.457626295, 2.457643358, 2.457658288, 2.457677483, 2.457688147, 2.457700945, 2.457707343, 2.457707343, 2.457703077, 2.457688147, 2.45767535, 2.457658288, 2.457641225, 2.457617764, 2.457604966, 2.457587904, 2.457572974, 2.457551645, 2.457534583, 2.45751752, 2.45750259, 2.45748766, 2.45747273, 2.457455667, 2.457438605, 2.457421542, 2.457404479, 2.457391682, 2.457372486, 2.457357556, 2.457340494, 2.457325564, 2.457306368, 2.457289305, 2.457272243, 2.45725518, 2.45724025, 2.457223187, 2.457208257, 2.457193327, 2.457176264, 2.457159202, 2.457142139, 2.457127209, 2.457105881, 2.457093083, 2.457069622, 2.457058958, 2.457041895, 2.457020567, 2.45700457, 2.456988574, 2.456969378, 2.456950183, 2.456934186, 2.456914991, 2.456898995, 2.4568766, 2.456867002, 2.456844607, 2.456828611, 2.456809415, 2.456793419, 2.456774223, 2.456755027, 2.456739031, 2.456716636, 2.456694241, 2.456681444, 2.456662249, 2.456650873, 2.456638076, 2.456622436, 2.45661106, 2.456595419, 2.456582622, 2.456566982, 2.456551341, 2.456541387, 2.456531434, 2.456520059, 2.45650584, 2.456491621, 2.456471714, 2.456454652, 2.456440433, 2.456429057, 2.456414839, 2.456402041, 2.456390666, 2.456376447, 2.456362228, 2.456348009, 2.456335212, 2.456323837, 2.456308196, 2.456291133, 2.456271227, 2.456255586, 2.456241367, 2.456225726, 2.456211507, 2.456201554, 2.456187335, 2.456171694, 2.456157475, 2.456141834, 2.456130459, 2.456117662, 2.456104865, 2.456092068, 2.456073583, 2.456049411, 2.456039458, 2.456026661, 2.456018129} ;
		LinearInterpolation linRealNeff = new LinearInterpolation(fermiEnergy_eV, realNeff) ;
		double realNeff_interpolated = linRealNeff.interpolate(Ef_eV) ;
		return realNeff_interpolated ;
	}

	public double getImagNeff(double Ef_eV){
		double[] fermiEnergy_eV = {0, 0.0139911785, 0.02158594212, 0.02918201113, 0.03412030449, 0.04095402528, 0.04854748351, 0.05690328996, 0.06601491768, 0.07551033029, 0.08120575031, 0.08576417495, 0.09259920113, 0.1005725281, 0.1077835068, 0.1146172276, 0.1229743394, 0.1282911961, 0.1336080528, 0.1400632103, 0.1472754944, 0.1544877785, 0.1598020244, 0.1658747024, 0.1708090796, 0.1776441058, 0.1837141729, 0.1920634524, 0.1985120829, 0.2038224127, 0.2095100004, 0.214061898, 0.2186111849, 0.2239202093, 0.2280922383, 0.234538258, 0.2402258457, 0.2451497797, 0.2496964558, 0.2550028694, 0.2591683714, 0.2633338734, 0.2690201557, 0.2762219967, 0.28114332, 0.2849315641, 0.2883373286, 0.2928826994, 0.2978092442, 0.301212398, 0.3053739839, 0.3099167438, 0.3136997663, 0.3148224024, 0.3174697349, 0.3197306718, 0.3235149997, 0.3284376283, 0.3325913818, 0.3348549295, 0.3386353412, 0.3398981436, 0.3414036943, 0.3431624909, 0.3459307896, 0.3484458425, 0.3496990177, 0.3527179514, 0.3539693861, 0.3569926712, 0.3587497272, 0.3605050426, 0.3625101229, 0.3652758109, 0.3675358774, 0.3700422278, 0.3722970728, 0.3747955908, 0.3772975898, 0.3793000592, 0.3807960371, 0.3843110194, 0.3865693454, 0.3880653233, 0.3905751546, 0.3910581492, 0.3930606187, 0.3948141937, 0.3968036092, 0.3979783385, 0.3979504507, 0.3998017707, 0.4010266881, 0.4028715724, 0.4053321332, 0.4071770176, 0.4102682714, 0.4127288323, 0.4133273471, 0.4157921983, 0.4182549044, 0.4219682704, 0.4250552338, 0.4287621642, 0.4318534181, 0.4336983024, 0.4361631537, 0.4367595232, 0.4404793249, 0.4435748692, 0.4472946708, 0.4510123273, 0.4553499507, 0.4584412045, 0.4621545705, 0.4677471443, 0.4720912033, 0.4776902128, 0.4851598491, 0.4876268456, 0.4975935114, 0.5019375704, 0.5075408702, 0.5143905396, 0.5187496151, 0.5255971393, 0.533071066, 0.5386765111, 0.5436555536, 0.5486367413, 0.557361328, 0.5642217234, 0.5704535711, 0.5779339334, 0.5847878932, 0.5953852521, 0.6016149545, 0.6072268352, 0.6153400358, 0.6246953155, 0.6365433343, 0.6446458088, 0.6564981181, 0.6664798004, 0.6745951462, 0.6833326042, 0.6933185769, 0.7051751765, 0.717029631, 0.7270177489, 0.7363751738, 0.7519794629, 0.7632075147, 0.7719449727, 0.7800581733, 0.7906705487, 0.8000344092, 0.8125174115, 0.8212570147, 0.8299966179, 0.8393583332, 0.8512170781, 0.8599523908, 0.8661928193, 0.8855447979, 0.9023933113, 0.9117528814, 0.9229873689, 0.9354703711, 0.9448320865, 0.9516967723, 0.9585614582, 0.9710444604, 0.9804061758, 0.9866487495, 1} ;
		double[] imagNeff = {0.00109615427, 0.001095024944, 0.001093894149, 0.001093336094, 0.00109334564, 0.001091640636, 0.001089937101, 0.001089380515, 0.001087107177, 0.001086552794, 0.001085418328, 0.001085427139, 0.001084294876, 0.001082592075, 0.001079742326, 0.001078037322, 0.001078053476, 0.001077491016, 0.001076928556, 0.001075795558, 0.001073518549, 0.001071241539, 0.001069533599, 0.001067254386, 0.001065545711, 0.001064413448, 0.001060988755, 0.001057568468, 0.001053571769, 0.001050145608, 0.001045574701, 0.001042719811, 0.001038719441, 0.001034720539, 0.001031864916, 0.001026722736, 0.001022151829, 0.001015861232, 0.001010715382, 0.001005571, 0.000999851675, 0.00099413235, 0.0009889887023, 0.0009821297712, 0.0009746936941, 0.0009701191153, 0.0009643983217, 0.000958679731, 0.0009535346148, 0.0009466683408, 0.0009392307952, 0.0009323667241, 0.0009255011844, 0.0009180577645, 0.0009129082426, 0.0009048942854, 0.0008986014859, 0.0008917381491, 0.0008808641622, 0.0008739956854, 0.0008659846652, 0.0008575392254, 0.0008514329336, 0.0008453271313, 0.00083769598, 0.000830064339, 0.0008243393846, 0.0008155632423, 0.0008090746342, 0.0008022076259, 0.0007953381701, 0.0007877050606, 0.0007785451334, 0.0007697685016, 0.0007613727175, 0.0007499228086, 0.0007392360637, 0.0007243497135, 0.0007109906705, 0.0007006852629, 0.0006903788762, 0.0006770217913, 0.0006678623536, 0.000657555967, 0.0006476333653, 0.0006373250205, 0.0006270196129, 0.0006186228498, 0.0006025900401, 0.0006019283313, 0.000589692565, 0.0005802840572, 0.0005699331299, 0.0005577009836, 0.0005417051929, 0.0005294730467, 0.0005163021011, 0.0005003063104, 0.0004890129636, 0.0004748995985, 0.0004598450206, 0.0004457340688, 0.0004306806976, 0.0004137461075, 0.0004005751619, 0.0003883430156, 0.0003742296505, 0.0003619950909, 0.0003507077776, 0.0003394192575, 0.0003281319441, 0.000315903418, 0.0003017936729, 0.0002886227273, 0.0002745117755, 0.0002632280822, 0.0002519419755, 0.0002434819205, 0.0002340842728, 0.0002209121205, 0.0002115192995, 0.0002002331928, 0.0001936555635, 0.0001861391347, 0.0001814415175, 0.0001729838759, 0.0001654686538, 0.0001598322372, 0.0001532534011, 0.0001476157779, 0.0001410441819, 0.000138233817, 0.0001335398199, 0.0001288482362, 0.0001232142329, 0.000116646257, 0.0001110110471, 0.0001081982689, 0.000107272743, 0.0001035259921, 0.00009790164231, 0.00009227005245, 0.00008852812827, 0.00008572379683, 0.00008573948371, 0.00008481516448, 0.00008389325862, 0.00008203376002, 0.00007923304863, 0.00007925235556, 0.00007644681744, 0.00007553577172, 0.00007179264086, 0.00007086832163, 0.00006994279572, 0.00006996330933, 0.00006998140958, 0.00006906433045, 0.00006908122402, 0.00006909811758, 0.00006817500503, 0.00006725671922, 0.00006539118721, 0.00006446204125, 0.00006449944842, 0.0000617083905, 0.00005984406516, 0.00005892457267, 0.00005800749354, 0.000057084381, 0.00005615644172, 0.00005522850244, 0.00005431142332, 0.00005338831077, 0.0000534003776, 0.0000515336389} ;
		LinearInterpolation linImagNeff = new LinearInterpolation(fermiEnergy_eV, imagNeff) ;
		double imagNeff_interpolated = linImagNeff.interpolate(Ef_eV) ;
		return imagNeff_interpolated ;
	}
	
	public RingWgDesignSpaceKappa getModulator(){
		return ringMod ;
	}
	

	// getting some stuff
	public Wavelength getInputLambda(){
		return inputLambda ;
	}
	
	public Graphene getGraphene(){
		return graphene ;
	}
	
	public double getKappa(){
		return kappa ;
	}

	public double getVoltage(){
		return grapheneVoltage ;
	}
	
}
